<%- include('../header') -%>
<%- include('../navbar') -%>

<div class="container">
    <h1>Edit Anime</h1>
    <form id="form-creation">
        <label for="title">Title</label>
        <input type="text" id="title" name="title" placeholder="Demon slayer" value="<%= anime.name%>">

        <label for="image">Image</label>
        <input type="text" id="image" name="image" placeholder="https://www.nautiljon.com/images/anime/00/87/mini/kimetsu_no_yaiba_7878.jpg" value="<%= anime.img%>">

        <label for="date">Date</label>
        <input id="date" type="date" name="date" placeholder="Publication date" value="<%=anime.date.year%>-<%=anime.date.month.toString().length === 1 ? "0"+anime.date.month : anime.date.month%>-<%=anime.date.day.toString().length === 1 ? "0"+anime.date.day : anime.date.day%>">

        <label for="gender">Gender</label>
        <select multiple="multiple" id="gender">
            <option>Action</option>
            <option>Adventure</option>
            <option>Fantasy</option>
            <option>Fantastic</option>
            <option>Romance</option>
            <option>Comedy</option>
            <option>Drama</option>
            <option>Sci-Fi</option>
            <option>Thriller</option>
            <option>Music</option>
        </select>

        <label for="type">Type</label>
        <div class="type">
            <div>
                <input type="radio" id="movie" name="type" value="movie"
                       <%=anime.type[0] ==="movie" ? 'checked' : '' %>>
                <label for="movie">Movie</label>
            </div>
            <div>
                <input type="radio" id="serie" name="type" value="serie"
                        <%=anime.type[0] ==="serie" ? 'checked' : '' %>>
                <label for="serie">Serie</label>
            </div>
        </div>

        <label for="rating">Rating</label>
        <input type="number" id="rating" name="rating" placeholder="9.6" value="<%=anime.rating%>">

        <label for="duration">Duration</label>
        <input type="text" id="duration" name="duration" placeholder="1h20min or 24 (episodes)" value="<%=anime.duration%>">

        <label for="creator">Creator</label>
        <input type="text" id="creator" name="creator" placeholder="Koyoharu Gotōge" value="<%=anime.creator%>">

        <label for="casting">Casting</label>
        <input type="text" id="casting" name="casting" placeholder="ufotable" value="<%=anime.casting%>">

        <label for="trailer">Trailer</label>
        <input type="text" id="trailer" name="trailer" placeholder="https://www.youtube.com/watch?v=VQGCKyvzIM4" value="<%=anime.videos.trailer%>">

        <label for="description">Description</label>
        <textarea id="description" name="description" placeholder="Description" style="height:200px"><%=anime.description%></textarea>
    </form>

    <form id="form-player">
        <div>
            <label for="description">Player 1</label>
            <textarea id="description" name="player_0"
                      placeholder="https://video.sibnet.ru/shell.php?videoid=4668331&#10;https://video.sibnet.ru/shell.php?videoid=4568339&#10;https://video.sibnet.ru/shell.php?videoid=4346361"
                      style="height:200px"
            ><%=anime.videos.players.find(p=>p.id===1).episodes.map(e=>e.url).join("\n")%></textarea>
        </div>
        <div id="other-fields">
            <%anime.videos.players.forEach(p=> { if(p.id===1) return;%>
                <div>
                    <label for="description">Player <%=p.id%></label>
                    <textarea id="description" name="player_<%=p.id-1%>"
                              placeholder="https://video.sibnet.ru/shell.php?videoid=4668331&#10;https://video.sibnet.ru/shell.php?videoid=4568339&#10;https://video.sibnet.ru/shell.php?videoid=4346361"
                              style="height:200px"
                    ><%=p.episodes.map(e=>e.url).join("\n")%></textarea>
                </div>
            <%})%>
        </div>
    </form>
    <button id="add-btn">Add more player</button>

    <a class="button-create" id="display-btn">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        <p>Update</p>
    </a>

    <div class="error-container">
        <p class="error-message">Error! Please fill in all the information fields</p>
    </div>
</div>

<script>
    const addBtn = document.getElementById("add-btn");
    const otherFields = document.getElementById("other-fields");
    const form = document.getElementById("form-creation");
    const formPlayer = document.getElementById("form-player");
    const displayBtn = document.getElementById("display-btn");

    let nbOtherFields = otherFields.children.length +1;
    addBtn.addEventListener("click", function() {
        const div = document.createElement("div");
        const label = document.createElement("label");
        label.innerHTML = "Player " + (nbOtherFields + 1);
        const input = document.createElement("textarea");
        input.name = `player_${nbOtherFields}`;
        input.id = 'description'
        input.style.height = "200px";
        input.placeholder = "https://video.sibnet.ru/shell.php?videoid=4668331\nhttps://video.sibnet.ru/shell.php?videoid=4568339\nhttps://video.sibnet.ru/shell.php?videoid=4346361";
        input.style.marginBottom = "0";
        const button = document.createElement("button");
        button.innerHTML = "Remove";
        button.id = `remove-btn-${nbOtherFields}`;
        button.classList.add("remove-btn");

        div.append(label);
        div.append(input);
        div.append(button);
        otherFields.append(div);

        button.addEventListener("click", function() {
            div.remove();
            nbOtherFields--;
        });

        nbOtherFields++;
    });

    displayBtn.addEventListener("click", function() {
        let db_data = {};

        const value = new FormData(form);
        const players = new FormData(formPlayer);
        if (value.get("title") == "" || value.get("image") == "" || value.get("date") == "" || value.get("type") == "" || value.get("rating") == "" || value.get("duration") == "" || value.get("creator") == "" || value.get("casting") == "" || value.get("trailer") == "" || value.get("description") == "" || value.get("player_0") == "") {
            document.querySelector(".error-container").style.display = "block";
        } else {
            let players_list = []
            for (let i = 0; i < nbOtherFields; i++) {
                players_list.push({id: i+1, episodes: players.get(`player_${i}`).split("\n").map((item, index)=>{ return {id:index+1, url:item} }) })
            }

            db_data = {
                name: value.get("title"),
                img: value.get("image"),
                date: {
                    day: value.get("date").split("-")[2],
                    month: value.get("date").split("-")[1],
                    year: value.get("date").split("-")[0],
                },
                type: [value.get("type")],
                rating: value.get("rating"),
                duration: value.get("duration"),
                creator: value.get("creator"),
                casting: value.get("casting"),
                description: value.get("description"),
                videos: {
                    trailer: value.get("trailer"),
                    players: players_list
                }
            };
        }

        const children = [].slice.call(document.getElementById('drop-display').getElementsByTagName('*'), 0);
        const genders = []
        const arrayLength = children.length;
        for (let i = 0; i < arrayLength; i++) {
            const name = children[i].getAttribute("id");
            if (name != null && name !== "") {
                genders.push(name);
            }
        }
        db_data.genre = genders

        fetch('/anime/edit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                anime: db_data,
            })
        }).then(res => res.json()).then(data => {
            if (data) {
                window.location.href = "/anime/?name=" + data.anime.name;
            } else {
                document.querySelector(".error-container").style.display = "block";
            }
        })
    });

</script>

<%- include('../footer') -%>

<style>

    .remove-btn {
        background-color: #f44444;
        color: #fff;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 25px;
    }

    #add-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        width: fit-content;
        height: fit-content;
        background-color: #f5f5f5;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 10px;
        padding: 10px 20px;
    }

    #title, #date, #casting, #creator, #description, #image, #duration, #trailer, #rating, .type {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        margin: 6px 0px 16px;
        resize: vertical;
    }

    label{
        margin-right: 0px;
        margin-left: 0px;
        width: 100%;
        color: #2f2f2f;
    }


    input[type=submit] {
        background-color: #1255a2;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    input[type=submit]:hover {
        background-color: #1872D9;
    }

    .container {
        border-radius:5px;
        background-color:#f2f2f2;
        padding:20px;
        width: 100%;
        max-width: 440px;
        margin:5rem auto;

    }
    h1  {
        color: #ffc800;
        font-size: 2rem;
        width: 100%;
    }

    .button-create {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 10px;
        background-color: #C8472C;
        border-radius: 10px;
        padding: 8px 10px;
        height: fit-content;
        width: fit-content;
        color: white !important;
        font-size: 14px;
    }

    .button-create svg {
        width: 20px;
        height: 20px;
    }

    .drop {
        position: relative;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        margin-bottom: 16px;
    }
    .drop.open {
        z-index: 100;
    }
    .drop.open .drop-screen {
        z-index: 100;
        display: block;
    }

    .drop .drop-options {
        display: none;
    }

    .drop.open .drop-options {
        display: block;
        z-index: 200;
        max-height: 200px;
    }
    .drop.open .drop-display {
        z-index: 200;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    .drop select {
        display: none;
    }
    .drop .drop-screen {
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        opacity: 0;
        display: none;
        z-index: 1;
    }
    .drop .drop-display {
        position: relative;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 100%;
        background: #FFF;
        z-index: 1;
        margin: 0px;
        font-size: 16px;
        min-height: 58px;
    }
    .drop .drop-display:hover:after {
        opacity: 0.75;
    }
    .drop .drop-display:after {
        content: "\25BC";
        position: absolute;
        right: 10px;
        top: 12px;
        font-size: 16px;
        color: #444;
    }
    .drop .drop-display .item {
        position: relative;
        display: inline-block;
        padding: 0px 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin: 5px 5px -4px 0px;
        overflow: hidden;
        height: 30px;
        line-height: 36px;
        width: fit-content;
        color: #2f2f2f;
    }
    .item svg {
        width: 15px;
        height: 15px;
        color: #2f2f2f;
        margin-left: 5px;

    }

    .drop .drop-display .item .btnclose {
        color: #444;
        position: absolute;
        font-size: 16px;
        right: 5px;
        top: 10px;
        cursor: pointer;
    }
    .drop .drop-display .item .btnclose:hover {
        opacity: 0.75;
    }
    .drop .drop-display .item.remove {
        -webkit-animation: removeSelected 0.2s, hide 1s infinite;
        animation: removeSelected 0.2s, hide 1s infinite;
        -webkit-animation-delay: 0s, 0.2s;
        animation-delay: 0s, 0.2s;
    }
    .drop .drop-display .item.add {
        -webkit-animation: addSelected 0.2s;
        animation: addSelected 0.2s;
    }
    .drop .drop-display .item.hide {
        display: none;
    }
    .drop .drop-options {
        background: #FFF;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.25);
        position: absolute;
        width: 100%;
        max-height: 0px;
        overflow-y: auto;
        transition: all 0.25s linear;
        z-index: 1;
    }
    .drop .drop-options a {
        display: block;
        height: 40px;
        line-height: 40px;
        padding: 0px 20px;
        position: relative;
        max-height: 40px;
        overflow: hidden;
        color: #2f2f2f;
    }
    .drop .drop-options a:hover {
        background: #616161;
        cursor: pointer;
        color: white;
    }
    .drop .drop-options a.remove {
        -webkit-animation: removeOption 0.2s;
        animation: removeOption 0.2s;
        max-height: 0px;
    }
    .drop .drop-options a.add {
        -webkit-animation: addOption 0.2s;
        animation: addOption 0.2s;
    }
    .drop .drop-options a.hide {
        display: none;
    }

    @-webkit-keyframes pop {
        from {
            transform: scale(0);
        }
        to {
            transform: scale(1);
        }
    }

    @keyframes pop {
        from {
            transform: scale(0);
        }
        to {
            transform: scale(1);
        }
    }
    @-webkit-keyframes removeOption {
        from {
            max-height: 40px;
        }
        to {
            max-height: 0px;
        }
    }
    @keyframes removeOption {
        from {
            max-height: 40px;
        }
        to {
            max-height: 0px;
        }
    }
    @-webkit-keyframes addOption {
        from {
            max-height: 0px;
        }
        to {
            max-height: 40px;
        }
    }
    @keyframes addOption {
        from {
            max-height: 0px;
        }
        to {
            max-height: 40px;
        }
    }
    @-webkit-keyframes removeSelected {
        from {
            transform: scale(1);
        }
        to {
            transform: scale(0);
        }
    }
    @keyframes removeSelected {
        from {
            transform: scale(1);
        }
        to {
            transform: scale(0);
        }
    }
    @-webkit-keyframes addSelected {
        from {
            transform: scale(0);
        }
        to {
            transform: scale(1);
        }
    }
    @keyframes addSelected {
        from {
            transform: scale(0);
        }
        to {
            transform: scale(1);
        }
    }
    @-webkit-keyframes hide {
        from, to {
            max-height: 0px;
            max-width: 0px;
            padding: 0px;
            margin: 0px;
            border-width: 0px;
        }
    }
    @keyframes hide {
        from, to {
            max-height: 0px;
            max-width: 0px;
            padding: 0px;
            margin: 0px;
            border-width: 0px;
        }
    }

    .error-container {
        display: none;
        border: 1px solid #c73c3c;
        border-radius: 5px;
        background-color: #ec827d;
        color: white;
        width: fit-content;
        padding: 10px 20px;
        margin-top: 10px;
    }
</style>
<script>

    var $ = {
        get: function (selector) {
            var ele = document.querySelectorAll(selector);
            for (var i = 0; i < ele.length; i++) {
                this.init(ele[i]);
            }
            return ele;
        },
        template: function (html) {
            var template = document.createElement("div");
            template.innerHTML = html.trim();
            return this.init(template.childNodes[0]);
        },
        init: function (ele) {
            ele.on = function (event, func) {
                this.addEventListener(event, func);
            };
            return ele;
        }
    };

    //Build the plugin
    var drop = function (info) {
        var o = {
            options: info.options,
            selected: info.selected || [],
            preselected: info.preselected || [],
            open: false,
            html: {
                select: $.get(info.selector)[0],
                options: $.get(info.selector + " option"),
                parent: undefined
            },
            init: function () {
                //Setup Drop HTML
                this.html.parent = $.get(info.selector)[0].parentNode;
                this.html.drop = $.template('<div class="drop"></div>');
                this.html.dropDisplay = $.template(
                    '<div class="drop-display" id="drop-display">Display</div>'
                );
                this.html.dropOptions = $.template(
                    '<div class="drop-options">Options</div>'
                );
                this.html.dropScreen = $.template('<div class="drop-screen"></div>');

                //Getting interesting
                this.html.parent.insertBefore(this.html.drop, this.html.select);
                this.html.drop.appendChild(this.html.dropDisplay);
                this.html.drop.appendChild(this.html.dropOptions);
                this.html.drop.appendChild(this.html.dropScreen);
                //Hide old select
                this.html.drop.appendChild(this.html.select);

                //Core Events
                var that = this;
                this.html.dropDisplay.on("click", function () {
                    that.toggle();
                });
                this.html.dropScreen.on("click", function () {
                    that.toggle();
                });
                //Run Render
                this.load();
                this.preselect();
                this.render();
            },
            toggle: function () {
                this.html.drop.classList.toggle("open");
            },
            addOption: function (e, element) {
                var index = Number(element.dataset.index);
                this.clearStates();
                this.selected.push({
                    index: Number(index),
                    state: "add",
                    removed: false
                });
                this.options[index].state = "remove";
                this.render();
            },
            removeOption: function (e, element) {
                e.stopPropagation();
                this.clearStates();
                var index = Number(element.dataset.index);
                this.selected.forEach(function (select) {
                    if (select.index === index && !select.removed) {
                        select.removed = true;
                        select.state = "remove";
                    }
                });
                this.options[index].state = "add";
                this.render();
            },
            load: function () {
                this.options = [];
                for (let i = 0; i < this.html.options.length; i++) {
                    const option = this.html.options[i];
                    this.options[i] = {
                        html: option.innerHTML,
                        value: option.value,
                        selected: option.selected,
                        state: ""
                    };
                }
            },
            preselect: function () {
                const that = this;
                this.selected = [];
                this.preselected.forEach(function (pre) {
                    that.selected.push({
                        index: that.options.indexOf(that.options.find(o=>o.value === pre)),
                        state: "add",
                        removed: false
                    });
                    that.options.find(o=>o.value === pre).state = "remove";
                });
            },
            render: function () {
                this.renderDrop();
                this.renderOptions();
            },
            renderDrop: function () {
                var that = this;
                var parentHTML = $.template("<div></div>");
                this.selected.forEach(function (select, index) {
                    var option = that.options[select.index];
                    var childHTML = $.template(
                        '<span class="item ' +
                        select.state +
                        '" id="'+option.value+'">' +
                        option.html +
                        "</span>"
                    );
                    var childCloseHTML = $.template(
                        `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" data-index="${select.index}">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>`
                    );
                    childCloseHTML.on("click", function (e) {
                        that.removeOption(e, this);
                    });
                    childHTML.appendChild(childCloseHTML);
                    parentHTML.appendChild(childHTML);
                });
                this.html.dropDisplay.innerHTML = "";
                this.html.dropDisplay.appendChild(parentHTML);
            },
            renderOptions: function () {
                var that = this;
                var parentHTML = $.template("<div></div>");
                this.options.forEach(function (option, index) {
                    var childHTML = $.template(
                        '<a data-index="' +
                        index +
                        '" class="' +
                        option.state +
                        '">' +
                        option.html +
                        "</a>"
                    );
                    childHTML.on("click", function (e) {
                        that.addOption(e, this);
                    });
                    parentHTML.appendChild(childHTML);
                });
                this.html.dropOptions.innerHTML = "";
                this.html.dropOptions.appendChild(parentHTML);
            },
            clearStates: function () {
                var that = this;
                this.selected.forEach(function (select, index) {
                    select.state = that.changeState(select.state);
                });
                this.options.forEach(function (option) {
                    option.state = that.changeState(option.state);
                });
            },
            changeState: function (state) {
                switch (state) {
                    case "remove":
                        return "hide";
                    case "hide":
                        return "hide";
                    default:
                        return "";
                }
            },
            isSelected: function (index) {
                var check = false;
                this.selected.forEach(function (select) {
                    if (select.index === index && select.removed === false) check = true;
                });
                return check;
            }
        };
        o.init();
        return o;
    };

    //Set up some data
    var options = [
        { html: "Action", value: "Action" },
        { html: "Adventure", value: "Adventure" },
        { html: "Fantasy", value: "Fantasy" },
        { html: "Fantastic", value: "Fantastic" },
        { html: "Romance", value: "Romance" },
        { html: "Fantastic", value: "Fantastic" },
        { html: "Comedy", value: "Comedy" },
        { html: "Drama", value: "Drama" },
        { html: "Horror", value: "Horror" },
        { html: "Sci-Fi", value: "Sci-Fi" },
        { html: "Thriller", value: "Thriller" },
        { html: "Music", value: "Music" },
    ];

    //The loot you are acutally looking for
    //Run Please
    var myDrop = new drop({
        selector: "#gender",
        <% options_select = anime.genre.map(e=> {return e}) -%>
        preselected: [ '<%- options_select.join("', '")%>' ]
    });

</script>