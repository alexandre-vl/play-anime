
<div class="control-episodes">
    <a class="control-episodes-arrow" onclick="changeEp('prev')">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z" clip-rule="evenodd" />
        </svg>
        <p>Previous</p>
    </a>

    <select name="EpisodesSelector" id="select-episodes" class="select-episodes" onchange="changeEp()">
        <%anime.videos.players[0].episodes.forEach(ep=> {
            %>
            <option value="<%=ep.id%>" id="<%=ep.id%>">Episode <%=ep.id%></option>
            <%
        })%>
    </select>

    <a class="control-episodes-arrow" onclick="changeEp('next')">
        <p>Next</p>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd" />
        </svg>
    </a>
</div>
<div class="control-player">
    <%anime.videos.players.forEach(p=>{%>
        <a class="control-episodes-arrow control-player-button" id="<%=p.id%>" onclick="changePlayer(<%=p.id%>)">
            <p>Player <%=p.id%></p>
        </a>
    <%}) %>

</div>

<script>
    function changeEp(stats = "none") {
        const urlParams = new URLSearchParams(window.location.search);
        const player_param = urlParams.get('player_id');
        const ep_selector =  document.getElementById('select-episodes')
        const option_selected = ep_selector.options[ep_selector.selectedIndex]
        if (stats === "next") {
            const ep_next = ep_selector.options[ep_selector.selectedIndex + 1]
            if (!ep_next) return
            option_selected.id = ep_next.value
            ep_selector.value = ep_next.value

        } else if (stats === "prev") {
            const ep_prev = ep_selector.options[ep_selector.selectedIndex - 1]
            if (!ep_prev) return
            option_selected.id = ep_prev.value
            ep_selector.value = ep_prev.value
        }

        urlParams.has('ep_id') ? urlParams.set('ep_id', option_selected.id) : urlParams.append('ep_id', option_selected.id);
        window.history.replaceState(null, null, "?"+urlParams.toString().replaceAll("+", "%20"));

        fetch('episodes',{
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ep_id: option_selected.id,
                anime_name: "<%=anime.name%>",
                player_id: player_param ?? 1,
            })
        }).then(res=>res.json()).then(data=>{
            const player = document.getElementById('player')
            player.src = data.url
        })
    }

    function changePlayer(player) {
        const urlParams = new URLSearchParams(window.location.search);
        const player_param = urlParams.get('player_id');
        const ep_param = urlParams.get('ep_id');
        if (parseInt(player_param) === player) return;
        urlParams.has('player_id') ? urlParams.set('player_id', player) : urlParams.append('player_id', player);
        window.history.replaceState(null, null, "?"+urlParams.toString().replaceAll("+", "%20"));

        fetch('episodes',{
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ep_id: ep_param,
                anime_name: "<%=anime.name%>",
                player_id: player,
            })
        }).then(res=>res.json()).then(data=>{
            const player = document.getElementById('player')
            player.src = data.url
        })
    }

    window.onload = (event) => {
        changeEp()
    };

</script>

<style>
    .control-episodes {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
        gap: 20px;
    }

    .control-episodes-arrow {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 10px;
        background-color: #C8472C;
        border-radius: 10px;
        padding: 8px 20px;
        color: white !important;
    }

    .control-player-button {
        background-color: #edb500;
    }

    .control-episodes-arrow svg, .control-episodes-arrow img {
        width: 20px;
        height: 20px;
    }

    .select-episodes {
        width: 200px;
        height: 40px;
        background-color: #C8472C;
        border-radius: 10px;
        padding: 8px 20px;
        color: white !important;
        font-size: 16px;
    }

    .select-episodes:focus {
        outline: none;
        border-radius: 10px;
    }

    .control-player {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
    }

    @media screen and (max-width: 530px) {
        .control-episodes {
            flex-direction: column;
        }
    }

</style>